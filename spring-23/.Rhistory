final_table = rbind(final_table, avg_length, coverage)
}
}
# initialize n sample size, m samples, b bootstraps, alpha, z-val, shape, and scale
n = c(100,250)
shape = 1.5
lambda = 1
b = 1000
M = c(100,500)
alpha = 0.05
zval = qnorm(p = alpha/2, lower.tail = FALSE)
# true median
med = lambda*(log(2)^(1/shape))
# initialize table
final_table = data.frame((matrix(ncol = 4, nrow = 0)))
for (i in 1:length(n)) {
for (j in 1:length(M)) {
# initialize data frames for confidence intervals
normal_CI = data.frame(matrix(ncol = 3, nrow = 0))
basic_CI = data.frame(matrix(ncol = 3, nrow = 0))
percentile_CI = data.frame(matrix(ncol = 3, nrow = 0))
student_CI = data.frame(matrix(ncol = 3, nrow = 0))
coverage_normal = c()
coverage_basic = c()
coverage_percentile = c()
coverage_student = c()
for (k in 1:M[i]) {
sample_m = rweibull(n[i],shape=shape,scale=lambda) # take m samples of size n
sample_stat = median(sample_m) # find sample statistic of sample m
boot.samples = bootsampling(sample_m,b) # take b bootsamples from sample m
sample_stat_bs = apply(boot.samples, 2, median) # find the median for every bootstrap sample
se <- sd(sample_stat_bs)
# normal bootstrap CI
normal_CI = rbind(normal_CI, cbind(sample_stat - zval*se, sample_stat + zval*se))
# does this confidence interval contain the true median?
if (tail(normal_CI$V1,1) < med & tail(normal_CI$V2,1) > med) {
coverage_normal = append(coverage_normal,1)
} else {
coverage_normal = append(coverage_normal,0)
}
# basic bootstrap CI
basic_CI = rbind(basic_CI, cbind(2*sample_stat - quantile(sample_stat_bs, probs = (1 - alpha/2)), 2*sample_stat - quantile(sample_stat_bs, probs = (alpha/2))))
# does this confidence interval contain the true median?
if (tail(basic_CI$V1,1) < med & tail(basic_CI$V2,1) > med) {
coverage_basic = append(coverage_basic,1)
} else {
coverage_basic = append(coverage_basic,0)
}
# percentile bootstrap CI
percentile_CI = rbind(percentile_CI, cbind(quantile(sample_stat_bs, probs = alpha/2), quantile(sample_stat_bs, probs = (1 - (alpha/2)))))
# does this confidence interval contain the true median?
if (tail(percentile_CI$V1,1) < med & tail(percentile_CI$V2,1) > med) {
coverage_percentile = append(coverage_percentile,1)
} else {
coverage_percentile = append(coverage_percentile,0)
}
# studentized bootstrap CI
boot.samples.SE = rep(0, b)
for (l in 1:b) {
iterated.samples <- bootsampling(boot.samples[,l], 100) # using L = 100
sample_stat_l <- apply(iterated.samples, 2, median)
boot.samples.SE[l] <- sd(sample_stat_l)
}
t = (sample_stat_bs - sample_stat)/boot.samples.SE
qval = quantile(t, probs = c(alpha/2, 1 - alpha/2))
student_CI = rbind(student_CI, cbind(sample_stat - qval[2]*se, sample_stat - qval[1]*se))
# does this confidence interval contain the true median?
if (tail(student_CI$V1,1) < med & tail(student_CI$V2,1) > med) {
coverage_student = append(coverage_student,1)
} else {
coverage_student = append(coverage_student,0)
}
}
avg_length = c(mean(normal_CI$V2 - normal_CI$V1), mean(basic_CI$V2 - basic_CI$V1), mean(percentile_CI$V2 - percentile_CI$V1), mean(student_CI$V2 - student_CI$V1))
coverage = c(mean(coverage_normal), mean(coverage_basic), mean(coverage_percentile), mean(coverage_student))
final_table = rbind(final_table, avg_length, coverage)
}
}
boot.samples.SE
final_table
# initialize n sample size, m samples, b bootstraps, alpha, z-val, shape, and scale
n = c(100,250)
shape = 1.5
lambda = 1
b = 500
M = c(100,500)
alpha = 0.05
zval = qnorm(p = alpha/2, lower.tail = FALSE)
# true median
med = lambda*(log(2)^(1/shape))
# initialize table
final_table = data.frame((matrix(ncol = 4, nrow = 0)))
for (i in 1:length(n)) {
for (j in 1:length(M)) {
# initialize data frames for confidence intervals
normal_CI = data.frame(matrix(ncol = 3, nrow = 0))
basic_CI = data.frame(matrix(ncol = 3, nrow = 0))
percentile_CI = data.frame(matrix(ncol = 3, nrow = 0))
student_CI = data.frame(matrix(ncol = 3, nrow = 0))
coverage_normal = c()
coverage_basic = c()
coverage_percentile = c()
coverage_student = c()
for (k in 1:M[i]) {
sample_m = rweibull(n[i],shape=shape,scale=lambda) # take m samples of size n
sample_stat = median(sample_m) # find sample statistic of sample m
boot.samples = bootsampling(sample_m,b) # take b bootsamples from sample m
sample_stat_bs = apply(boot.samples, 2, median) # find the median for every bootstrap sample
se <- sd(sample_stat_bs)
# normal bootstrap CI
normal_CI = rbind(normal_CI, cbind(sample_stat - zval*se, sample_stat + zval*se))
# does this confidence interval contain the true median?
if (tail(normal_CI$V1,1) < med & tail(normal_CI$V2,1) > med) {
coverage_normal = append(coverage_normal,1)
} else {
coverage_normal = append(coverage_normal,0)
}
# basic bootstrap CI
basic_CI = rbind(basic_CI, cbind(2*sample_stat - quantile(sample_stat_bs, probs = (1 - alpha/2)), 2*sample_stat - quantile(sample_stat_bs, probs = (alpha/2))))
# does this confidence interval contain the true median?
if (tail(basic_CI$V1,1) < med & tail(basic_CI$V2,1) > med) {
coverage_basic = append(coverage_basic,1)
} else {
coverage_basic = append(coverage_basic,0)
}
# percentile bootstrap CI
percentile_CI = rbind(percentile_CI, cbind(quantile(sample_stat_bs, probs = alpha/2), quantile(sample_stat_bs, probs = (1 - (alpha/2)))))
# does this confidence interval contain the true median?
if (tail(percentile_CI$V1,1) < med & tail(percentile_CI$V2,1) > med) {
coverage_percentile = append(coverage_percentile,1)
} else {
coverage_percentile = append(coverage_percentile,0)
}
# studentized bootstrap CI
boot.samples.SE = rep(0, b)
for (l in 1:b) {
iterated.samples <- bootsampling(boot.samples[,l], 50) # using L = 100
sample_stat_l <- apply(iterated.samples, 2, median)
boot.samples.SE[l] <- sd(sample_stat_l)
}
t = (sample_stat_bs - sample_stat)/boot.samples.SE
qval = quantile(t, probs = c(alpha/2, 1 - alpha/2))
student_CI = rbind(student_CI, cbind(sample_stat - qval[2]*se, sample_stat - qval[1]*se))
# does this confidence interval contain the true median?
if (tail(student_CI$V1,1) < med & tail(student_CI$V2,1) > med) {
coverage_student = append(coverage_student,1)
} else {
coverage_student = append(coverage_student,0)
}
}
avg_length = c(mean(normal_CI$V2 - normal_CI$V1), mean(basic_CI$V2 - basic_CI$V1), mean(percentile_CI$V2 - percentile_CI$V1), mean(student_CI$V2 - student_CI$V1))
coverage = c(mean(coverage_normal), mean(coverage_basic), mean(coverage_percentile), mean(coverage_student))
final_table = rbind(final_table, avg_length, coverage)
}
}
final_table
set.seed(405568250)
# simulate data
n = 100000 # sample size
p = 20 # number of predictors
# create correlation matrix for regressors
R = matrix(c(rep(0.99, p/2), rep(0.9, p/2)), p, p)
diag(R) = 1
mean.vector = rep(0,20)
# generate design matrix X
design.orig = mvrnorm(n, mu = mean.vector, R)
library(MASS)
set.seed(405568250)
# simulate data
n = 100000 # sample size
p = 20 # number of predictors
# create correlation matrix for regressors
R = matrix(c(rep(0.99, p/2), rep(0.9, p/2)), p, p)
diag(R) = 1
mean.vector = rep(0,20)
# generate design matrix X
design.orig = mvrnorm(n, mu = mean.vector, R)
intercept = rep(1, n)
design = cbind(intercept, design.orig)
# generate error term
error.term = rnorm(n,0,1.25)
# generate beta
beta_true = rep(3,21)
# generate response y
response = design%*%beta_true + error.term
response
library(MASS)
set.seed(405568250)
# simulate data
n = 100000 # sample size
p = 20 # number of predictors
# create correlation matrix for regressors
R = matrix(c(rep(0.99, p/2), rep(0.9, p/2)), p, p)
diag(R) = 1
mean.vector = rep(0,20)
# generate design matrix X
design = mvrnorm(n, mu = mean.vector, R)
# generate error term
error.term = rnorm(n,0,1.25)
# generate beta
beta_true = rep(3,20)
# generate response y
response = design%*%beta_true + error.term
response
setwd("/Users/joshuasusanto/Desktop/BSA-Data-Journalism/spring-23")
knitr::opts_chunk$set(echo = TRUE)
# import tidyverse
library(tidyverse)
# read in seasons data
seasons_data = read_csv('Seasons_Stats.csv')
head(seasons_data)
# filter data, want player to have played over 50 games and want recorded PER, remove special characters from the player's name
seasons_data_clean = seasons_data %>% filter(!is.na(PER), PER <= 40) %>% mutate(Player = str_replace_all(Player, "[^[:alnum:]]", " ")) %>% mutate(Player = str_trim(Player, side = 'right'))
head(seasons_data_clean)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
elligible.players = elligible.players$Player
head(elligible.players, 20)
# this function is used to calculate the largest per difference for every player
# this model fails to consider the possibility that multiple players can have the same name in the same season, can be improved
max_diff = c()
max_diff_season = c()
max_diff_per = c()
for (i in elligible.players) {
temp = seasons_data_clean %>% filter(Player == i)
per = temp$PER
per_diff = c(0)
for (j in 1:(length(per)-1)) {
diff = per[j+1] - per[j]
per_diff = append(per_diff, diff)
}
max_diff = append(max_diff, max(per_diff))
max_season = temp$Year[which(per_diff == max(per_diff))[1]]
max_diff_season = append(max_diff_season, max_season)
temp2 = seasons_data_clean %>% filter(Player == i, Year == max_season) %>% dplyr::select(PER)
max_diff_per = append(max_diff_per, temp2$PER[1])
}
potential_breakout_seasons <- tibble(
Player = elligible.players,
`Year` = max_diff_season,
`PER Differential` = max_diff,
`PER` = max_diff_per
)
potential_breakout_seasons = potential_breakout_seasons %>% arrange(desc(`PER Differential`))
potential_breakout_seasons
seasons_data_clean %>% filter(Player == 'Gheorghe Muresan')
# filter data, want player to have played over 50 games and want recorded PER, remove special characters from the player's name
seasons_data_clean = seasons_data %>% filter(!is.na(PER), PER <= 40, PER > 0) %>% mutate(Player = str_replace_all(Player, "[^[:alnum:]]", " ")) %>% mutate(Player = str_trim(Player, side = 'right'))
head(seasons_data_clean)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
elligible.players = elligible.players$Player
head(elligible.players, 20)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
elligible.players = elligible.players$Player
head(elligible.players, 20)
# this function is used to calculate the largest per difference for every player
# this model fails to consider the possibility that multiple players can have the same name in the same season, can be improved
players = seasons_data_clean %>% filter(Player == i)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
layers = elligible.players$Player
head(players, 20)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
players = elligible.players$Player
head(players, 20)
# this function is used to calculate the largest per difference for every player
# this model fails to consider the possibility that multiple players can have the same name in the same season, can be improved
max_diff = c()
max_diff_season = c()
max_diff_per = c()
for (i in players) {
temp = seasons_data_clean %>% filter(Player == i)
per = temp$PER
per_diff = c(0)
for (j in 1:(length(per)-1)) {
diff = per[j+1] - per[j]
per_diff = append(per_diff, diff)
}
max_diff = append(max_diff, max(per_diff))
max_season = temp$Year[which(per_diff == max(per_diff))[1]]
max_diff_season = append(max_diff_season, max_season)
temp2 = seasons_data_clean %>% filter(Player == i, Year == max_season) %>% dplyr::select(PER)
max_diff_per = append(max_diff_per, temp2$PER[1])
}
potential_breakout_seasons <- tibble(
Player = elligible.players,
`Year` = max_diff_season,
`PER Differential` = max_diff,
`PER` = max_diff_per
)
potential_breakout_seasons = potential_breakout_seasons %>% arrange(desc(`PER Differential`))
potential_breakout_seasons
potential_breakout_seasons <- tibble(
Player = players,
`Year` = max_diff_season,
`PER Differential` = max_diff,
`PER` = max_diff_per
)
potential_breakout_seasons = potential_breakout_seasons %>% arrange(desc(`PER Differential`))
potential_breakout_seasons
seasons_data_clean %>% filter(Player == 'Briante Weber')
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% filter(G > 50) %>% group_by(Player) %>% count() %>% filter(n > 1)
players = elligible.players$Player
head(players, 20)
# filter data, want player to have played over 50 games and want recorded PER, remove special characters from the player's name
seasons_data_clean = seasons_data %>% filter(!is.na(PER), PER <= 40, PER > 0, G > 50) %>% mutate(Player = str_replace_all(Player, "[^[:alnum:]]", " ")) %>% mutate(Player = str_trim(Player, side = 'right'))
head(seasons_data_clean)
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
elligible.players
# filter all players that have played more than one season
elligible.players = seasons_data_clean %>% group_by(Player) %>% count() %>% filter(n > 1)
players = elligible.players$Player
head(players, 20)
# this function is used to calculate the largest per difference for every player
# this model fails to consider the possibility that multiple players can have the same name in the same season, can be improved
max_diff = c()
max_diff_season = c()
max_diff_per = c()
for (i in players) {
temp = seasons_data_clean %>% filter(Player == i)
per = temp$PER
per_diff = c(0)
for (j in 1:(length(per)-1)) {
diff = per[j+1] - per[j]
per_diff = append(per_diff, diff)
}
max_diff = append(max_diff, max(per_diff))
max_season = temp$Year[which(per_diff == max(per_diff))[1]]
max_diff_season = append(max_diff_season, max_season)
temp2 = seasons_data_clean %>% filter(Player == i, Year == max_season) %>% dplyr::select(PER)
max_diff_per = append(max_diff_per, temp2$PER[1])
}
potential_breakout_seasons <- tibble(
Player = players,
`Year` = max_diff_season,
`PER Differential` = max_diff,
`PER` = max_diff_per
)
potential_breakout_seasons = potential_breakout_seasons %>% arrange(desc(`PER Differential`))
potential_breakout_seasons
hist(potential_breakout_seasons$`PER Differential`, breaks = 50, main = 'Histogram of PER Differentials', xlab = 'PER Differential', col = 'lightgray')
breakout_seasons = potential_breakout_seasons %>% filter(PER >= 18) %>% mutate(`Previous PER` = PER - `PER Differential`)
print(breakout_seasons)
# must account for the potential season jump
breakout_seasons %>% filter(Year >= 2000)
breakout_seasons = potential_breakout_seasons %>% filter(PER >= 19) %>% mutate(`Previous PER` = PER - `PER Differential`)
print(breakout_seasons)
View(breakout_seasons)
# must account for the potential season jump
modern = breakout_seasons %>% filter(Year >= 2000)
modern
View(modern)
View(modern)
breakout_seasons %>% filter(Player %in% breakout_players)
breakout_players = breakout_seasons$Player
breakout_seasons %>% filter(Player %in% breakout_players)
seasons_data_clean %>% filter(Player %in% breakout_players)
seasons_data_clean %>% filter(Player %in% breakout_players) %>% group_by_(Player) %>% count()
seasons_data_clean %>% filter(Player %in% breakout_players) %>% group_by(Player) %>% count()
hist(breakout_seasons$`PER Differential`, breaks = 50, main = 'Histogram of PER Differentials', xlab = 'PER Differential', col = 'lightgray')
breakout_players = breakout_seasons$Player
seasons_data_clean %>% filter(Player %in% breakout_players)
1960*0.9
1960 - 1960*0.9
breakout_seasons
breakout_seasons = breakout_seasons[1:(289-289*0.9),]
breakout_seasons
breakout_seasons = potential_breakout_seasons %>% filter(PER >= 19, `PER Differential` > 4.5) %>% mutate(`Previous PER` = PER - `PER Differential`)
print(breakout_seasons)
breakout_seasons2 = breakout_seasons[1:(289-289*0.7),]
breakout_seasons
breakout_seasons2 = breakout_seasons[1:(289-289*0.8),]
breakout_seasons
breakout_seasons = potential_breakout_seasons %>% filter(PER >= 19) %>% mutate(`Previous PER` = PER - `PER Differential`)
breakout_seasons2 = breakout_seasons[1:(289-289*0.8),]
breakout_seasons2
potential_breakout_seasons
potential_breakout_seasons$`PER Differential`[(1960-1960*0.9)] #finding 90th percentile of per diff
breakout_seasons2 = breakout_seasons %>% filter(PER >= cutoff)
cutoff = potential_breakout_seasons$`PER Differential`[(1960-1960*0.9)] #finding 90th percentile of per diff
breakout_seasons2 = breakout_seasons %>% filter(PER >= cutoff)
breakout_seasons2
breakout_seasons2 = breakout_seasons %>% filter(`PER Differential` >= cutoff)
breakout_seasons2
seasons_data_clean %>% filter(Player %in% breakout_players)
breakout_seasons2
hist(breakout_seasons2$`PER Differential`, breaks = 50, main = 'Histogram of PER Differentials', xlab = 'PER Differential', col = 'lightgray')
seasons_data_clean %>% filter(Player %in% breakout_players2)
seasons_data_clean %>% filter(Player %in% breakout_players)
seasons_data_clean %>% filter(Player %in% breakout_players) %>% group_by(Player) %>% count()
breakout_players = breakout_seasons2$Player
seasons_data_clean %>% filter(Player %in% breakout_players) %>% group_by(Player) %>% count()
seasons_data_clean %>% filter(Player %in% breakout_players)
breakout_seasons2 %>% ggplot(aes(x=Player, fill=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout_seasons2 %>% ggplot(aes(x=Pos) +
breakout_seasons2 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout_seasons2 %>% ggplot(aes(x=Pos)) +
breakout_seasons2 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout_seasons2
breakout_seasons2 %>% full_join(seasons_data_clean)
breakout_seasons2 %>% left_join(seasons_data_clean)
seasons_data_clean %>% filter(Player %in% breakout_players)
breakout_seasons2 %>% left_join(seasons_data_clean)
breakout_seasons2 %>% left_join(seasons_data_clean)
breakout3 = breakout_seasons2 %>% left_join(seasons_data_clean)
breakout3$...1
breakout_seasons2
seasons_data_clean
breakout3 = breakout_seasons2 %>% left_join(seasons_data_clean)
breakout_seasons3 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue", 'red','white') ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue", 'black','gray') ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos), fill = Pos) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue", 'black','gray') ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos), fill = Pos) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue", 'black','gray') ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos fill = Pos)) +
breakout3 %>% ggplot(aes(x=Pos fill = Pos)) +
breakout3 %>% ggplot(aes(x=Pos, fill = Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue", 'black','gray') ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos, fill = Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue") ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos, fill = Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue","red", "white", "blue") ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos, fill = Pos)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "white", "blue","gray", "black", "yellow") ) +
theme(legend.position="none")
breakout3 %>% ggplot(aes(x=Pos, fill = Pos)) +
geom_bar( ) +
scale_fill_hue(c = 40) +
theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
install.packages('ggridges')
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
install.packages('viridis')
install.packages('hrbrthemes')
install.packages("hrbrthemes")
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
install.packages('shiny')
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
install.packages('https://cran.r-project.org/src/contrib/Archive/hrbrthemes/hrbrthemes_0.1.0.tar.gz', type='source', repos=NULL)
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
install.packages('hrbrthemes')
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
knitr::opts_chunk$set(echo = TRUE)
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
